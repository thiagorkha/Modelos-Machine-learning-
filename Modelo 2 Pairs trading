import numpy as np
import pandas as pd
import yfinance as yf
import statsmodels.api as sm
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
import matplotlib.pyplot as plt

# Configurações iniciais
IBOVESPA_TICKERS = [
    "ABEV3.SA", "ASAI3.SA", "AURE3.SA", "AZUL4.SA", "AZZA3.SA", "B3SA3.SA", "BBSE3.SA", "BBDC3.SA",
    "BBDC4.SA", "BRAP4.SA", "BBAS3.SA", "BRKM5.SA", "BRFS3.SA", "BPAC11.SA", "CXSE3.SA", "CRFB3.SA",
    "CCRO3.SA", "CMIG4.SA", "COGN3.SA", "CPLE6.SA", "CSAN3.SA", "CPFE3.SA", "CMIN3.SA", "CVCB3.SA",
    "CYRE3.SA", "ELET3.SA", "ELET6.SA", "EMBR3.SA", "ENGI11.SA", "ENEV3.SA", "EGIE3.SA", "EQTL3.SA",
    "FLRY3.SA", "GGBR4.SA", "GOAU4.SA", "NTCO3.SA", "HAPV3.SA", "HYPE3.SA", "IGTI11.SA", "IRBR3.SA",
    "ITSA4.SA", "ITUB4.SA", "JBSS3.SA", "KLBN11.SA", "RENT3.SA", "LREN3.SA", "LWSA3.SA", "MGLU3.SA",
    "POMO4.SA", "MRFG3.SA", "BEEF3.SA", "MRVE3.SA", "MULT3.SA", "PCAR3.SA", "PETR3.SA", "PETR4.SA",
    "RECV3.SA", "PRIO3.SA", "PETZ3.SA", "PSSA3.SA", "RADL3.SA", "RAIZ4.SA", "RDOR3.SA", "RAIL3.SA",
    "SBSP3.SA", "SANB11.SA", "STBP3.SA", "SMTO3.SA", "CSNA3.SA", "SLCE3.SA", "SUZB3.SA", "TAEE11.SA",
    "VIVT3.SA", "TIMS3.SA", "TOTS3.SA", "UGPA3.SA", "USIM5.SA", "VALE3.SA", "VAMO3.SA", "VBBR3.SA",
    "VIVA3.SA", "WEGE3.SA", "YDUQ3.SA"
]

START_DATE = '2020-01-01'
END_DATE = pd.Timestamp.today().strftime('%Y-%m-%d')  # Data atual
TRAIN_TEST_SPLIT = 0.8  # Proporção de dados para treino
Z_SCORE_THRESHOLD = 2.0  # Limite para divergência no spread

# Função para baixar dados históricos
def download_data(tickers, start_date, end_date):
    data = yf.download(tickers, start=start_date, end=end_date)['Close']
    return data.dropna()

# Função para encontrar pares cointegrados
def find_cointegrated_pairs(data):
    n = data.shape[1]
    score_matrix = np.zeros((n, n))
    pvalue_matrix = np.ones((n, n))
    keys = data.keys()
    pairs = []
    for i in range(n):
        for j in range(i + 1, n):
            S1 = data[keys[i]]
            S2 = data[keys[j]]
            result = sm.tsa.stattools.coint(S1, S2)
            score = result[0]
            pvalue = result[1]
            score_matrix[i, j] = score
            pvalue_matrix[i, j] = pvalue
            if pvalue < 0.05:  # Significância estatística
                pairs.append((keys[i], keys[j]))
    return score_matrix, pvalue_matrix, pairs

# Função para calcular o spread
def calculate_spread(stock1, stock2):
    model = sm.OLS(stock1, stock2).fit()
    hedge_ratio = model.params[0]
    spread = stock1 - hedge_ratio * stock2
    return spread, hedge_ratio

# Função para normalizar o spread (z-score)
def normalize_spread(spread):
    mean = spread.mean()
    std = spread.std()
    z_scores = (spread - mean) / std
    return z_scores

# Função principal
def main():
    # Baixar dados históricos
    print("Baixando dados históricos...")
    data = download_data(IBOVESPA_TICKERS, START_DATE, END_DATE)

    # Encontrar pares cointegrados
    print("Encontrando pares cointegrados...")
    _, _, pairs = find_cointegrated_pairs(data)
    if not pairs:
        print("Nenhum par cointegrado encontrado.")
        return

    print(f"Pares cointegrados encontrados: {pairs}")

    # Avaliar cada par cointegrado
    for stock1_ticker, stock2_ticker in pairs:
        stock1 = data[stock1_ticker]
        stock2 = data[stock2_ticker]

        # Calcular o spread
        print(f"\nAnalisando par: {stock1_ticker} e {stock2_ticker}")
        spread, hedge_ratio = calculate_spread(stock1, stock2)
        z_scores = normalize_spread(spread)

        # Dividir dados em treino e teste
        X = z_scores.values.reshape(-1, 1)
        y = np.where(z_scores > Z_SCORE_THRESHOLD, -1, np.where(z_scores < -Z_SCORE_THRESHOLD, 1, 0))
        X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=TRAIN_TEST_SPLIT, shuffle=False)

        # Treinar a rede neural
        print("Treinando rede neural...")
        model = Sequential([
            Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
            Dense(32, activation='relu'),
            Dense(1, activation='linear')
        ])
        model.compile(optimizer='adam', loss='mse')
        model.fit(X_train, y_train, epochs=50, batch_size=32, verbose=0)

        # Avaliar o modelo
        test_predictions = model.predict(X_test)
        test_predictions = np.where(test_predictions > 0.5, 1, np.where(test_predictions < -0.5, -1, 0))

        # Gerar sinais de trading
        last_z_score = z_scores.iloc[-1]
        signal = None
        if last_z_score > Z_SCORE_THRESHOLD:
            signal = "SELL"
        elif last_z_score < -Z_SCORE_THRESHOLD:
            signal = "BUY"

        # Recomendações de compra e venda
        if signal == "BUY":
            print(f"Recomendação: COMPRAR {stock1_ticker} e VENDER {stock2_ticker}")
            capital = 10000  # Capital disponível para investimento
            price_stock1 = stock1.iloc[-1]
            price_stock2 = stock2.iloc[-1]
            qty_stock1 = int(capital / price_stock1)
            qty_stock2 = int(qty_stock1 * hedge_ratio)
            total_cost_stock1 = qty_stock1 * price_stock1
            total_cost_stock2 = qty_stock2 * price_stock2
            print(f"Comprar {qty_stock1} ações de {stock1_ticker} por R${price_stock1:.2f} cada (Total: R${total_cost_stock1:.2f})")
            print(f"Vender {qty_stock2} ações de {stock2_ticker} por R${price_stock2:.2f} cada (Total: R${total_cost_stock2:.2f})")
        elif signal == "SELL":
            print(f"Recomendação: VENDER {stock1_ticker} e COMPRAR {stock2_ticker}")
            capital = 10000  # Capital disponível para investimento
            price_stock1 = stock1.iloc[-1]
            price_stock2 = stock2.iloc[-1]
            qty_stock1 = int(capital / price_stock1)
            qty_stock2 = int(qty_stock1 * hedge_ratio)
            total_cost_stock1 = qty_stock1 * price_stock1
            total_cost_stock2 = qty_stock2 * price_stock2
            print(f"Vender {qty_stock1} ações de {stock1_ticker} por R${price_stock1:.2f} cada (Total: R${total_cost_stock1:.2f})")
            print(f"Comprar {qty_stock2} ações de {stock2_ticker} por R${price_stock2:.2f} cada (Total: R${total_cost_stock2:.2f})")
        else:
            print("Nenhuma recomendação de trading no momento.")
            continue  # Pula para o próximo par se não houver recomendação

        # Plotar o spread e os sinais de trading (apenas para pares com recomendação)
        z_scores_filtered = z_scores.loc[START_DATE:END_DATE]  # Limita o intervalo de datas
        plt.figure(figsize=(12, 6))
        plt.plot(z_scores_filtered, label="Z-Score do Spread", color="blue")
        plt.axhline(Z_SCORE_THRESHOLD, color="red", linestyle="--", label="Limite Superior")
        plt.axhline(-Z_SCORE_THRESHOLD, color="green", linestyle="--", label="Limite Inferior")
        #plt.scatter(len(z_scores_filtered) - 1, last_z_score, color="orange", s=100, label="Último Z-Score")
        plt.title(f"Spread Normalizado para {stock1_ticker} e {stock2_ticker} ({START_DATE} até {END_DATE})")
        plt.xlabel("Data")
        plt.ylabel("Z-Score")
        plt.legend()
        plt.tight_layout()
        plt.show()

if __name__ == "__main__":
    main()
