import numpy as np
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.optimizers import Adam

# 1. Coleta de Dados Atualizados
ticker = "PETR4.SA"  # S√≠mbolo do Ibovespa
end_date = datetime.today().strftime('%Y-%m-%d')
start_date = (datetime.today() - timedelta(days=865*5)).strftime('%Y-%m-%d')  # 5 anos de dados

# Coleta de dados
data = yf.download(ticker, start=start_date, end=end_date)
data = data[['Close']]  # Usando apenas o pre√ßo de fechamento

# Verifica√ß√£o de dados ausentes
if data.isnull().sum().any():
    print("Tratando valores ausentes...")
    data = data.fillna(method='ffill')  # Preenche valores ausentes com o valor anterior

# 2. Pr√©-processamento
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_prices = scaler.fit_transform(data)

# Criar sequ√™ncias temporais
def create_sequences(data, window_size):
    X, y = [], []
    for i in range(window_size, len(data)):
        X.append(data[i-window_size:i, 0])
        y.append(data[i, 0])
    return np.array(X), np.array(y)

window_size = 60  # Janela de 60 dias
X, y = create_sequences(scaled_prices, window_size)

# Divis√£o treino/teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)
X_train = X_train.reshape((X_train.shape[0], X_train.shape[1], 1))
X_test = X_test.reshape((X_test.shape[0], X_test.shape[1], 1))

# 3. Modelagem LSTM
model = Sequential([
    LSTM(128, return_sequences=True, input_shape=(window_size, 1)),
    Dropout(0.3),
    LSTM(64),
    Dropout(0.2),
    Dense(32, activation='relu'),
    Dense(1)
])

model.compile(
    optimizer=Adam(learning_rate=0.001),
    loss='mean_squared_error'
)

# Treinamento
history = model.fit(
    X_train, y_train,
    epochs=100,
    batch_size=32,
    validation_data=(X_test, y_test),
    callbacks=[EarlyStopping(patience=15, restore_best_weights=True)],
    verbose=1
)

# 4. Previs√µes e Resultados
# Previs√£o no conjunto de teste
test_predictions = model.predict(X_test)
test_predictions = scaler.inverse_transform(test_predictions)
y_test_actual = scaler.inverse_transform(y_test.reshape(-1, 1))

# Previs√£o do pr√≥ximo dia
last_window = scaled_prices[-window_size:].reshape(1, window_size, 1)
next_day_prediction = scaler.inverse_transform(model.predict(last_window))[0][0]

# Datas relevantes
last_date = data.index[-1]
next_trading_day = last_date + pd.tseries.offsets.BusinessDay(n=1)  # Pr√≥ximo dia √∫til

# M√©tricas
mse = mean_squared_error(y_test_actual, test_predictions)
mae = mean_absolute_error(y_test_actual, test_predictions)
r2 = r2_score(y_test_actual, test_predictions)

print("\nüîÆ Previs√£o para o Pr√≥ximo Dia √ötil:")
print(f"Data: {next_trading_day.strftime('%d/%m/%Y')}")
print(f"Valor Previsto: R$ {next_day_prediction:.2f}")
print("\nüìä Desempenho no Conjunto de Teste:")
print(f"MSE: {mse:.2f}")
print(f"MAE: {mae:.2f}")
print(f"R¬≤: {r2:.2f}")

# Plot
plt.figure(figsize=(14, 7))
plt.plot(data.index[-len(y_test_actual):], y_test_actual, label='Valor Real', color='blue', alpha=0.7)
plt.plot(data.index[-len(test_predictions):], test_predictions, label='Previs√µes Hist√≥ricas', color='orange', linestyle='--')
plt.scatter(next_trading_day, next_day_prediction, color='red', s=100, label='Pr√≥xima Previs√£o', zorder=5)
plt.title(f'Previs√£o do Ibovespa - √öltima Atualiza√ß√£o: {end_date}', fontsize=14)
plt.xlabel('Data', fontsize=12)
plt.ylabel('Pre√ßo (R$)', fontsize=12)
plt.legend()
plt.grid(True)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()
